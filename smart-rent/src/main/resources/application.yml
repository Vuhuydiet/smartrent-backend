server:
  port: 8080

# Logging Configuration
logging:
  level:
    root: INFO
    # Application-wide logging
    com.smartrent: INFO
    # Service-specific logging levels
    com.smartrent.service.authentication: INFO
    com.smartrent.service.user: INFO
    com.smartrent.service.admin: INFO
    com.smartrent.service.email: INFO
    com.smartrent.service.role: INFO
    com.smartrent.service.listing: INFO
    com.smartrent.service.payment: INFO
    com.smartrent.service.vnpay: INFO
    com.smartrent.service.analytics: INFO
    com.smartrent.service.communication: INFO
    com.smartrent.service.content: INFO
    com.smartrent.service.discovery: INFO
    # Framework logging
    org.springframework: WARN
    org.hibernate: WARN
    org.hibernate.SQL: ERROR
    org.hibernate.type.descriptor.sql.BasicBinder: ERROR
    com.zaxxer.hikari: WARN
    org.flywaydb: INFO
    feign: INFO
    io.github.resilience4j: INFO
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.springframework.boot.actuate: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/smart-rent.log
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 30

spring:
  application:
    name: smart-rent
  datasource:
    driverClassName: com.mysql.cj.jdbc.Driver
    url: ${IDENTITY_SERVICE_DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 0
    validate-on-migrate: true
    out-of-order: false
  jpa:
    database: MYSQL
    openInView: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        jdbc:
          batch_size: 25
          batch_versioned_data: true
          time_zone: UTC
        order_inserts: true
        order_updates: true
        show_sql: false
        connection:
          provider_disables_autocommit: false
          handling_mode: DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION

application:
  client-url: "${CLIENT_URL:http://localhost:3000}"
  authorize-ignored:
    methods:
      get:
        - "/swagger-ui/**"
        - "/swagger-ui.html"
        - "/v3/api-docs/**"
        - "/v3/api-docs"
        - "/swagger-resources/**"
        - "/webjars/**"
        - "/actuator/health"
        - "/actuator/**"
        - "/v1/payments/vnpay/callback"
      post:
        - "/v1/auth/**"
        - "/v1/users"
        - "/v1/admins"
        - "/v1/payments/vnpay/ipn"
  authentication:
    jwt:
      access-signer-key: "${ACCESS_SIGNER_KEY}"
      refresh-signer-key: "${REFRESH_SIGNER_KEY}"
      reset-password-signer-key: "${RESET_PASSWORD_SIGNER_KEY}"
      valid-duration: "${VALID_DURATION}"
      refreshable-duration: "${REFRESHABLE_DURATION}"
      reset_password_duration: "${RESET_PASSWORD_DURATION}"
  api-key:
    brevo: "${BREVO_API_KEY}"
  email:
    sender:
      email: "${SENDER_EMAIL}"
      name: "${SENDER_NAME:SmartRent}"
    subject: "SmartRent"
  otp:
    length: 6
    duration: 60 #s
  email-retry:
    max-attempts: 3
    base-wait-duration: 2000 # milliseconds
    exponential-multiplier: 2.0
    jitter-percentage: 0.25
    min-wait-duration: 1000 # milliseconds
  circuit-breaker:
    failure-rate-threshold: 60 # percentage
    wait-duration-in-open-state: 120 # seconds
    sliding-window-size: 20
    minimum-number-of-calls: 10
    permitted-calls-in-half-open: 5
    timeout-duration: 15 # seconds
feign:
  client:
    config:
      brevo:
        url: "${BREVO_URL}"
      vnpay:
        url: "${VNPAY_QUERY_URL:https://sandbox.vnpayment.vn/paymentv2/vpcpay.html}"

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true

open:
  api:
    title: "SmartRent API"
    version: "v1.0.0"
    description: "API for SmartRent Application"
    server:
      url: "http://localhost:8080"
      description: "Local Server."
    group:
      package-to-scan: "com.smartrent.controller"
  # S3-compatible storage config (Cloudflare R2, DigitalOcean Spaces, AWS S3, etc.)
  storage:
    s3:
      endpoint: ${S3_ENDPOINT}
      region: ${S3_REGION}
      accessKey: ${S3_ACCESS_KEY}
      secretKey: ${S3_SECRET_KEY}
      bucketName: ${S3_BUCKET}
      publicUrl: ${S3_PUBLIC_URL}

# VNPay Configuration
vnpay:
  tmn-code: "${VNPAY_TMN_CODE}"
  hash-secret: "${VNPAY_HASH_SECRET}"
  payment-url: "${VNPAY_PAYMENT_URL:https://sandbox.vnpayment.vn/paymentv2/vpcpay.html}"
  query-url: "${VNPAY_QUERY_URL:https://sandbox.vnpayment.vn/merchant_webapi/api/transaction}"
  refund-url: "${VNPAY_REFUND_URL:https://sandbox.vnpayment.vn/merchant_webapi/api/refund}"
  return-url: "${VNPAY_RETURN_URL:http://localhost:8080/api/v1/payments/vnpay/callback}"
  ipn-url: "${VNPAY_IPN_URL:http://localhost:8080/api/v1/payments/vnpay/ipn}"
  version: "2.1.0"
  command: "pay"
  currency-code: "VND"
  locale: "vn"
  order-type: "other"
  connect-timeout: 30000
  read-timeout: 30000

# Resilience4j Configuration for Circuit Breaker and Retry patterns
resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
        recordExceptions:
          - feign.FeignException
          - java.lang.RuntimeException
    instances:
      emailService:
        baseConfig: default
        recordFailurePredicate: com.smartrent.config.retry.email.EmailServiceFailurePredicate

  retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 1s
        exponentialBackoffMultiplier: 2.0
        enableExponentialBackoff: true
        retryExceptions:
          - feign.FeignException
        ignoreExceptions:
          - feign.FeignException$BadRequest
          - feign.FeignException$Unauthorized
          - feign.FeignException$Forbidden
    instances:
      emailService:
        baseConfig: default

  timelimiter:
    configs:
      default:
        timeoutDuration: 10s
        cancelRunningFuture: true
    instances:
      emailService:
        baseConfig: default

# Management endpoints for monitoring circuit breaker health
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers,retries
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true